<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/account_service/entity/AccountEntity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/account_service/entity/AccountEntity.java" />
              <option name="updatedContent" value="// ...existing code...&#10;    @PrePersist&#10;    protected void onCreate() {&#10;        this.IDAccount = UUID.randomUUID();&#10;    }&#10;&#10;    public UUID getIDAccount() {&#10;        return IDAccount;&#10;    }&#10;&#10;    public String getUserName() {&#10;        return UserName;&#10;    }&#10;&#10;    public String getFirstName() {&#10;        return FirstName;&#10;    }&#10;&#10;    public String getLastName() {&#10;        return LastName;&#10;    }&#10;}&#10;// ...existing code...&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/account_service/service/AccountService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/account_service/service/AccountService.java" />
              <option name="updatedContent" value="package com.example.account_service.service;&#10;&#10;import com.example.account_service.dto.AccountDto;&#10;// import com.example.account_service.entity.AccountEntity;&#10;// import com.example.account_service.interfaces.IAccount;&#10;// import com.example.account_service.repository.AccountRepository;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;// public class AccountService implements IAccount {&#10;public class AccountService {&#10;&#10;    // private final AccountRepository accountRepository;&#10;&#10;    public List&lt;AccountDto&gt; getAccounts() {&#10;        // Stub implementation to allow compilation&#10;        throw new UnsupportedOperationException(&quot;AccountRepository not implemented&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auth_service/src/main/java/com/example/auth_service/entity/UserEntity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auth_service/src/main/java/com/example/auth_service/entity/UserEntity.java" />
              <option name="originalContent" value="package com.example.auth_service.entity;&#10;&#10;import jakarta.persistence.Column;&#10;import jakarta.persistence.Entity;&#10;import jakarta.persistence.Id;&#10;import jakarta.persistence.Table;&#10;import lombok.Builder;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;import lombok.Setter;&#10;&#10;import java.util.UUID;&#10;&#10;@Setter&#10;@Getter&#10;@NoArgsConstructor&#10;@Entity&#10;@Table(name = &quot;user&quot;)&#10;public class UserEntity {&#10;    @Id&#10;    @Column(name = &quot;IdUser&quot;, columnDefinition = &quot;CHAR(36)&quot;)&#10;    private UUID idUser;&#10;&#10;    @Column(name = &quot;user_name&quot;, columnDefinition = &quot;VARCHAR(100)&quot;, nullable = false, unique = true)&#10;    private String userName;&#10;&#10;    @Column(name = &quot;password&quot;, columnDefinition = &quot;VARCHAR(120)&quot;, nullable = false)&#10;    private String password;&#10;&#10;    @Column(name = &quot;email&quot;, columnDefinition = &quot;VARCHAR(100)&quot;, nullable = false, unique = true)&#10;    private String email;&#10;&#10;    @Column(name = &quot;first_name&quot;, columnDefinition = &quot;VARCHAR(50)&quot;)&#10;    private String firstName;&#10;&#10;    @Column(name = &quot;last_name&quot;, columnDefinition = &quot;VARCHAR(50)&quot;)&#10;    private String lastName;&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.auth_service.entity;&#10;&#10;import jakarta.persistence.Column;&#10;import jakarta.persistence.Entity;&#10;import jakarta.persistence.Id;&#10;import jakarta.persistence.Table;&#10;import lombok.Builder;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;import lombok.Setter;&#10;&#10;import java.util.UUID;&#10;&#10;@Setter&#10;@Getter&#10;@NoArgsConstructor&#10;@Entity&#10;@Table(name = &quot;user&quot;)&#10;public class UserEntity {&#10;    @Id&#10;    @Column(name = &quot;IdUser&quot;, columnDefinition = &quot;CHAR(36)&quot;)&#10;    private UUID idUser;&#10;&#10;    @Column(name = &quot;user_name&quot;, columnDefinition = &quot;VARCHAR(100)&quot;, nullable = false, unique = true)&#10;    private String userName;&#10;&#10;    @Column(name = &quot;password&quot;, columnDefinition = &quot;VARCHAR(120)&quot;, nullable = false)&#10;    private String password;&#10;&#10;    @Column(name = &quot;email&quot;, columnDefinition = &quot;VARCHAR(100)&quot;, nullable = false, unique = true)&#10;    private String email;&#10;&#10;    @Column(name = &quot;first_name&quot;, columnDefinition = &quot;VARCHAR(50)&quot;)&#10;    private String firstName;&#10;&#10;    @Column(name = &quot;last_name&quot;, columnDefinition = &quot;VARCHAR(50)&quot;)&#10;    private String lastName;&#10;&#10;    // Add explicit getter and setter for userName to ensure JPA and Spring Data can access it&#10;    public String getUserName() {&#10;        return userName;&#10;    }&#10;    public void setUserName(String userName) {&#10;        this.userName = userName;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/department_service/service/DepartmentService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/department_service/service/DepartmentService.java" />
              <option name="updatedContent" value="// ...existing code...&#10;    @Override&#10;    public List&lt;DepartmentDto&gt; getAllDepartments() {&#10;        List&lt;DepartmentTypeEntity&gt; departmentEntities = departmentRepository.findAll();&#10;        return departmentEntities.stream()&#10;                .map(department -&gt; new DepartmentDto(&#10;                        department.getName(),&#10;                        department, // Pass the entity itself&#10;                        department.getCreatedAt()))&#10;                .toList();&#10;    }&#10;// ...existing code...&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>