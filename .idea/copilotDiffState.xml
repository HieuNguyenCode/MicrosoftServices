<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/account_service/entity/AccountEntity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/account_service/entity/AccountEntity.java" />
              <option name="updatedContent" value="// ...existing code...&#10;    @PrePersist&#10;    protected void onCreate() {&#10;        this.IDAccount = UUID.randomUUID();&#10;    }&#10;&#10;    public UUID getIDAccount() {&#10;        return IDAccount;&#10;    }&#10;&#10;    public String getUserName() {&#10;        return UserName;&#10;    }&#10;&#10;    public String getFirstName() {&#10;        return FirstName;&#10;    }&#10;&#10;    public String getLastName() {&#10;        return LastName;&#10;    }&#10;}&#10;// ...existing code...&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/account_service/service/AccountService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/account_service/service/AccountService.java" />
              <option name="updatedContent" value="package com.example.account_service.service;&#10;&#10;import com.example.account_service.dto.AccountDto;&#10;// import com.example.account_service.entity.AccountEntity;&#10;// import com.example.account_service.interfaces.IAccount;&#10;// import com.example.account_service.repository.AccountRepository;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;// public class AccountService implements IAccount {&#10;public class AccountService {&#10;&#10;    // private final AccountRepository accountRepository;&#10;&#10;    public List&lt;AccountDto&gt; getAccounts() {&#10;        // Stub implementation to allow compilation&#10;        throw new UnsupportedOperationException(&quot;AccountRepository not implemented&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auth_service/entity/RefreshTokenEntity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auth_service/entity/RefreshTokenEntity.java" />
              <option name="updatedContent" value="import javax.persistence.Column;&#10;import javax.persistence.Entity;&#10;import javax.persistence.Id;&#10;import java.util.UUID;&#10;&#10;@Entity&#10;public class User {&#10;&#10;    @Id&#10;    @Column(name = &quot;id_user&quot;, length = 36, nullable = false)&#10;    private UUID idUser;&#10;&#10;    // other fields, getters, and setters&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auth_service/service/JwtService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auth_service/service/JwtService.java" />
              <option name="updatedContent" value="// ...existing code...&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;// ...existing code...&#10;&#10;@Service&#10;public class JwtService {&#10;    private static final Logger logger = LoggerFactory.getLogger(JwtService.class);&#10;    // ...existing code...&#10;&#10;    public String generateAccessToken(Map&lt;String, Object&gt; claims, String subject) {&#10;        try {&#10;            if (claims == null || claims.isEmpty()) {&#10;                return null;&#10;            }&#10;            return buildToken(claims, subject, expiration);&#10;        } catch (Exception e) {&#10;            logger.error(&quot;Error generating access token&quot;, e);&#10;            throw new RuntimeException(&quot;Lỗi khi tạo access token&quot;);&#10;        }&#10;    }&#10;    // ...existing code...&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auth_service/service/UserService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auth_service/service/UserService.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auth_service/src/main/java/com/example/auth_service/dto/UserJwt.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auth_service/src/main/java/com/example/auth_service/dto/UserJwt.java" />
              <option name="originalContent" value="package com.example.auth_service.dto;&#10;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;&#10;import java.util.UUID;&#10;&#10;@Setter&#10;@Getter&#10;public class UserJwt {&#10;    private String Username;&#10;    private String Email;&#10;    private UUID Key;&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.auth_service.dto;&#10;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;&#10;import java.util.UUID;&#10;&#10;@Setter&#10;@Getter&#10;public class UserJwt {&#10;    private String username;&#10;    private String email;&#10;    private UUID key;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auth_service/src/main/java/com/example/auth_service/entity/RefreshTokenEntity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auth_service/src/main/java/com/example/auth_service/entity/RefreshTokenEntity.java" />
              <option name="originalContent" value="package com.example.auth_service.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@Setter&#10;@Getter&#10;@Entity&#10;@Table(name = &quot;refreshtoken&quot;)&#10;public class RefreshTokenEntity {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.AUTO)&#10;    @Column(name = &quot;IdRefreshToken&quot;, columnDefinition = &quot;CHAR(36)&quot;)&#10;    private UUID idRefreshToken;&#10;&#10;    @Column(name = &quot;Keyaccesstoken&quot;, length = 36, nullable = false)&#10;    private UUID keyAccessToken;&#10;&#10;    @Column(name = &quot;Keyrefreshtoken&quot;, length = 36, nullable = false)&#10;    private UUID keyRefreshToken;&#10;&#10;    @Column(name = &quot;IdUser&quot;, length = 36, nullable = false)&#10;    private UUID idUser;&#10;&#10;    @Column(name = &quot;created_at&quot;, nullable = false, updatable = false, insertable = false)&#10;    private LocalDateTime createdAt;&#10;&#10;    @Column(name = &quot;updated_at&quot;, nullable = false, insertable = false, updatable = false)&#10;    private LocalDateTime updatedAt;&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.auth_service.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;import org.hibernate.annotations.CreationTimestamp;&#10;import org.hibernate.annotations.UpdateTimestamp;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@Setter&#10;@Getter&#10;@Entity&#10;@Table(name = &quot;refreshtoken&quot;)&#10;public class RefreshTokenEntity {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.AUTO)&#10;    @Column(name = &quot;IdRefreshToken&quot;, columnDefinition = &quot;CHAR(36)&quot;)&#10;    private UUID idRefreshToken;&#10;&#10;    @Column(name = &quot;Keyaccesstoken&quot;, length = 36, nullable = false)&#10;    private UUID keyAccessToken;&#10;&#10;    @Column(name = &quot;Keyrefreshtoken&quot;, length = 36, nullable = false)&#10;    private UUID keyRefreshToken;&#10;&#10;    @Column(name = &quot;IdUser&quot;, length = 36, nullable = false)&#10;    private UUID idUser;&#10;&#10;    @CreationTimestamp&#10;    @Column(name = &quot;created_at&quot;, nullable = false, updatable = false)&#10;    private LocalDateTime createdAt;&#10;&#10;    @UpdateTimestamp&#10;    @Column(name = &quot;updated_at&quot;, nullable = false)&#10;    private LocalDateTime updatedAt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auth_service/src/main/java/com/example/auth_service/service/JwtService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auth_service/src/main/java/com/example/auth_service/service/JwtService.java" />
              <option name="originalContent" value="package com.example.auth_service.service;&#10;&#10;import com.example.auth_service.dto.UserJwt;&#10;import io.jsonwebtoken.ExpiredJwtException;&#10;import io.jsonwebtoken.Jwts;&#10;import io.jsonwebtoken.SignatureAlgorithm;&#10;import io.jsonwebtoken.io.Decoders;&#10;import io.jsonwebtoken.security.Keys;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.stereotype.Service;&#10;&#10;import jakarta.annotation.PostConstruct;&#10;import java.security.Key;&#10;import java.util.Date;&#10;import java.util.Map;&#10;import java.util.UUID;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;@PostConstruct&#10;public class JwtService {&#10;    @Value(&quot;${jwt.secret}&quot;)&#10;    private String secretKey;&#10;&#10;    @Value(&quot;${jwt.expiration}&quot;)&#10;    private long expiration;&#10;&#10;    public String generateAccessToken(Map&lt;String, Object&gt; userDetails, String username) {&#10;        return buildToken(Map.of(), username, expiration);&#10;    }&#10;&#10;    private String buildToken(Map&lt;String, Object&gt; claims, String userDetails, long expiration) {&#10;        return Jwts.builder()&#10;                .setClaims(claims)&#10;                .setSubject(userDetails)&#10;                .setIssuedAt(new Date(System.currentTimeMillis()))&#10;                .setExpiration(new Date(System.currentTimeMillis() + expiration))&#10;                .signWith(getSignInKey(secretKey), SignatureAlgorithm.HS256)&#10;                .compact();&#10;    }&#10;&#10;    private Key getSignInKey(String secretKey) {&#10;        byte[] keyBytes = Decoders.BASE64.decode(secretKey);&#10;        return Keys.hmacShaKeyFor(keyBytes);&#10;    }&#10;&#10;    public UserJwt parseToken(String token) {&#10;        try {&#10;            var claims = Jwts.parserBuilder()&#10;                    .setSigningKey(getSignInKey(secretKey))&#10;                    .build()&#10;                    .parseClaimsJws(token)&#10;                    .getBody();&#10;&#10;            UserJwt userJwt = new UserJwt();&#10;            userJwt.setUsername(claims.get(&quot;username&quot;, String.class));&#10;            userJwt.setEmail(claims.get(&quot;email&quot;, String.class));&#10;            userJwt.setKey(UUID.fromString(claims.get(&quot;key&quot;, String.class)));&#10;            return userJwt;&#10;        } catch (Exception e) {&#10;            return null;&#10;        }&#10;    }&#10;&#10;    public UserJwt parseTokenAllowExpired(String token) {&#10;        try {&#10;            return parseToken(token);&#10;        } catch (ExpiredJwtException e) {&#10;            var claims = e.getClaims();&#10;&#10;            UserJwt userJwt = new UserJwt();&#10;            userJwt.setUsername(claims.get(&quot;username&quot;, String.class));&#10;            userJwt.setEmail(claims.get(&quot;email&quot;, String.class));&#10;            userJwt.setKey(UUID.fromString(claims.get(&quot;key&quot;, String.class)));&#10;            return userJwt;&#10;        } catch (Exception e) {&#10;            return null;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.auth_service.service;&#10;&#10;import com.example.auth_service.dto.UserJwt;&#10;import io.jsonwebtoken.ExpiredJwtException;&#10;import io.jsonwebtoken.Jwts;&#10;import io.jsonwebtoken.SignatureAlgorithm;&#10;import io.jsonwebtoken.io.Decoders;&#10;import io.jsonwebtoken.security.Keys;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.stereotype.Service;&#10;&#10;import jakarta.annotation.PostConstruct;&#10;import java.security.Key;&#10;import java.util.Date;&#10;import java.util.Map;&#10;import java.util.UUID;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;@PostConstruct&#10;public class JwtService {&#10;    @Value(&quot;${jwt.secret}&quot;)&#10;    private String secretKey;&#10;&#10;    @Value(&quot;${jwt.expiration}&quot;)&#10;    private long expiration;&#10;&#10;    public String generateAccessToken(Map&lt;String, Object&gt; userDetails, String username) {&#10;        return buildToken(Map.of(), username, expiration);&#10;    }&#10;&#10;    private String buildToken(Map&lt;String, Object&gt; claims, String userDetails, long expiration) {&#10;        return Jwts.builder()&#10;                .setClaims(claims)&#10;                .setSubject(userDetails)&#10;                .setIssuedAt(new Date(System.currentTimeMillis()))&#10;                .setExpiration(new Date(System.currentTimeMillis() + expiration))&#10;                .signWith(getSignInKey(secretKey), SignatureAlgorithm.HS256)&#10;                .compact();&#10;    }&#10;&#10;    private Key getSignInKey(String secretKey) {&#10;        byte[] keyBytes = Decoders.BASE64.decode(secretKey);&#10;        return Keys.hmacShaKeyFor(keyBytes);&#10;    }&#10;&#10;    public UserJwt parseToken(String token) {&#10;        try {&#10;            var claims = Jwts.parserBuilder()&#10;                    .setSigningKey(getSignInKey(secretKey))&#10;                    .build()&#10;                    .parseClaimsJws(token)&#10;                    .getBody();&#10;&#10;            UserJwt userJwt = new UserJwt();&#10;            userJwt.setUsername(claims.get(&quot;username&quot;, String.class));&#10;            userJwt.setEmail(claims.get(&quot;email&quot;, String.class));&#10;            userJwt.setKey(UUID.fromString(claims.get(&quot;key&quot;, String.class)));&#10;            return userJwt;&#10;        } catch (Exception e) {&#10;            return null;&#10;        }&#10;    }&#10;&#10;    public UserJwt parseTokenAllowExpired(String token) {&#10;        try {&#10;            return parseToken(token);&#10;        } catch (ExpiredJwtException e) {&#10;            var claims = e.getClaims();&#10;&#10;            UserJwt userJwt = new UserJwt();&#10;            userJwt.setUsername(claims.get(&quot;username&quot;, String.class));&#10;            userJwt.setEmail(claims.get(&quot;email&quot;, String.class));&#10;            userJwt.setKey(UUID.fromString(claims.get(&quot;key&quot;, String.class)));&#10;            return userJwt;&#10;        } catch (Exception e) {&#10;            return null;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auth_service/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auth_service/src/main/resources/application.properties" />
              <option name="originalContent" value="spring.application.name=auth_service&#10;&#10;server.port=8082&#10;spring.datasource.url=jdbc:mariadb://localhost:3306/microservice&#10;spring.datasource.username=root&#10;spring.datasource.password=password124&#10;spring.datasource.driver-class-name=org.mariadb.jdbc.Driver&#10;&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.database-platform=org.hibernate.dialect.MariaDBDialect&#10;&#10;app.auth.tokenSecret=c6ae20a50a5d305f4264a24b397d3b457c7150092a6a3a7b63b4a668a97027e8f70bd877df30bb94e578a660b3a5ad0398a71027e14f9b79890ba5e05492c78c&#10;app.auth.tokenExpiration=3600000&#10;&#10;" />
              <option name="updatedContent" value="spring.application.name=auth_service&#10;&#10;server.port=8082&#10;spring.datasource.url=jdbc:mariadb://localhost:3306/microservice&#10;spring.datasource.username=root&#10;spring.datasource.password=password124&#10;spring.datasource.driver-class-name=org.mariadb.jdbc.Driver&#10;&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.database-platform=org.hibernate.dialect.MariaDBDialect&#10;spring.jpa.open-in-view=false&#10;&#10;app.auth.tokenSecret=c6ae20a50a5d305f4264a24b397d3b457c7150092a6a3a7b63b4a668a97027e8f70bd877df30bb94e578a660b3a5ad0398a71027e14f9b79890ba5e05492c78c&#10;app.auth.tokenExpiration=3600000" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db/migrations/Vx__fix_account_id_department.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db/migrations/Vx__fix_account_id_department.sql" />
              <option name="updatedContent" value="-- 1. Drop the foreign key constraint&#10;ALTER TABLE account DROP FOREIGN KEY account_ibfk_1;&#10;&#10;-- 2. Modify the column as needed&#10;ALTER TABLE account MODIFY COLUMN id_department VARCHAR(36) NOT NULL;&#10;&#10;-- 3. Re-add the foreign key constraint (adjust referenced table/column as needed)&#10;ALTER TABLE account&#10;  ADD CONSTRAINT account_ibfk_1 FOREIGN KEY (id_department) REFERENCES department(id_department);&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/department_service/service/DepartmentService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/department_service/service/DepartmentService.java" />
              <option name="updatedContent" value="// ...existing code...&#10;    @Override&#10;    public List&lt;DepartmentDto&gt; getAllDepartments() {&#10;        List&lt;DepartmentTypeEntity&gt; departmentEntities = departmentRepository.findAll();&#10;        return departmentEntities.stream()&#10;                .map(department -&gt; new DepartmentDto(&#10;                        department.getName(),&#10;                        department, // Pass the entity itself&#10;                        department.getCreatedAt()))&#10;                .toList();&#10;    }&#10;// ...existing code...&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>